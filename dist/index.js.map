{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["/**\n * Export the main MarkdownDocsGenerator class\n * This allows importing the generator in TypeScript projects\n */\n\nimport * as fs from 'fs';\nimport * as path from 'path';\n\n/**\n * Markdown documentation generator for Jest/Vitest test files\n * Extracts test information from TypeScript test files and generates markdown documentation\n */\nexport class MarkdownDocsGenerator {\n  private testDir: string;\n  private docsDir: string;\n  private githubUrl: string | null;\n  private githubBranch: string;\n  private repositoryRoot: string;\n  private verbose: boolean;\n  private testFiles: string[];\n  private documentation: Map<string, any>;\n  private knownTags: Set<string>;\n\n  /**\n   * @param {Object} options - Configuration options\n   * @param {string} [options.sourceDir] - Custom source directory path\n   * @param {string} [options.outputDir] - Custom output directory path\n   * @param {string} [options.githubUrl] - GitHub repository URL (e.g., 'https://github.com/username/repo')\n   * @param {string} [options.githubBranch] - GitHub branch name (default: 'main')\n   * @param {string} [options.repositoryRoot] - Repository root directory (default: current working directory)\n   * @param {boolean} [options.verbose] - Enable verbose logging (default: false)\n   */\n  constructor(options: { \n    sourceDir?: string; \n    outputDir?: string; \n    githubUrl?: string;\n    githubBranch?: string;\n    repositoryRoot?: string;\n    verbose?: boolean;\n  } = {}) {\n    this.testDir = options.sourceDir ? path.resolve(options.sourceDir) : path.join(process.cwd(), 'src', 'test');\n    this.docsDir = options.outputDir ? path.resolve(options.outputDir) : path.join(process.cwd(), 'doc', 'tests');\n    this.githubUrl = options.githubUrl || null;\n    this.githubBranch = options.githubBranch || 'main';\n    this.repositoryRoot = options.repositoryRoot ? path.resolve(options.repositoryRoot) : process.cwd();\n    this.verbose = options.verbose || false;\n    this.testFiles = [];\n    this.documentation = new Map();\n    this.knownTags = new Set(['given', 'when', 'then', 'and']);\n\n    console.log(`Source directory: ${this.testDir}`);\n    console.log(`Output directory: ${this.docsDir}`);\n    console.log(`Repository root: ${this.repositoryRoot}`);\n    if (this.githubUrl) {\n      console.log(`GitHub URL: ${this.githubUrl}`);\n      console.log(`GitHub branch: ${this.githubBranch}`);\n    }\n    if (this.verbose) {\n      console.log('üîç Verbose mode enabled');\n    }\n  }\n\n  /**\n   * Initialize the documentation generation process\n   */\n  async generate(): Promise<void> {\n    console.log('üöÄ Starting markdown documentation generation...');\n\n    // Ensure docs directory exists\n    this.ensureDocsDirectory();\n\n    // Find all test files\n    this.findTestFiles();\n\n    // Process each test file\n    for (const testFile of this.testFiles) {\n      console.log(`üìÑ Processing: ${testFile}`);\n      await this.processTestFile(testFile);\n    }\n\n    // Generate markdown files\n    this.generateMarkdownFiles();\n\n    // Generate all tests file\n    this.generateAllTestsFile();\n\n    // Generate index file\n    this.generateIndexFile();\n\n    console.log(`‚úÖ Documentation generated successfully in ${this.docsDir}`);\n  }\n\n  /**\n   * Ensure the documentation directory exists\n   */\n  private ensureDocsDirectory(): void {\n    if (!fs.existsSync(this.docsDir)) {\n      fs.mkdirSync(this.docsDir, { recursive: true });\n      console.log(`üìÅ Created directory: ${this.docsDir}`);\n    }\n  }\n\n  /**\n   * Recursively find all test files\n   */\n  private findTestFiles(): void {\n    const findTestFilesRecursive = (dir: string): void => {\n      const entries = fs.readdirSync(dir, { withFileTypes: true });\n\n      for (const entry of entries) {\n        const fullPath = path.join(dir, entry.name);\n\n        if (entry.isDirectory()) {\n          findTestFilesRecursive(fullPath);\n        } else if (entry.isFile() && (entry.name.endsWith('.test.ts') || entry.name.endsWith('.spec.ts'))) {\n          this.testFiles.push(fullPath);\n        }\n      }\n    };\n\n    findTestFilesRecursive(this.testDir);\n    console.log(`üîç Found ${this.testFiles.length} test files`);\n  }\n\n  /**\n   * Process a single test file and extract test information\n   */\n  private async processTestFile(filePath: string): Promise<void> {\n    // Implementation will be added in the future\n    // This is a placeholder method for the TypeScript version\n    console.log(`Processing file: ${filePath}`);\n  }\n\n  /**\n   * Generate a link to the specific test in the file\n   */\n  private generateTestLink(filePath: string, lineNumber: number, describeName: string, testName: string): string {\n    // Calculate path relative to repository root\n    const repoRelativePath = path.relative(this.repositoryRoot, filePath);\n    \n    if (this.githubUrl) {\n      // Normalize GitHub URL (remove trailing slash)\n      const normalizedGithubUrl = this.githubUrl.replace(/\\/$/, '');\n      // Create GitHub blob URL\n      const githubPath = repoRelativePath.replace(/\\\\/g, '/'); // Convert Windows paths to forward slashes\n      return `${normalizedGithubUrl}/blob/${this.githubBranch}/${githubPath}#L${lineNumber}`;\n    } else {\n      // Fallback to relative path from repository root\n      return `${repoRelativePath.replace(/\\\\/g, '/')}#L${lineNumber}`;\n    }\n  }\n\n  /**\n   * Generate markdown files for each test file\n   */\n  private generateMarkdownFiles(): void {\n    // Implementation will be added in the future\n    // This is a placeholder method for the TypeScript version\n    console.log('Generating markdown files...');\n  }\n\n  /**\n   * Generate comprehensive ALL_TESTS.md file with all test cases\n   */\n  private generateAllTestsFile(): void {\n    // Implementation will be added in the future\n    // This is a placeholder method for the TypeScript version\n    console.log('Generating all tests file...');\n  }\n\n  /**\n   * Generate the index file listing all documented files\n   */\n  private generateIndexFile(): void {\n    // Implementation will be added in the future\n    // This is a placeholder method for the TypeScript version\n    console.log('Generating index file...');\n  }\n}\n\n// Enable direct execution from command line\nif (require.main === module) {\n  // Parse command line arguments\n  const args = process.argv.slice(2);\n  const options: { \n    sourceDir?: string; \n    outputDir?: string;\n    githubUrl?: string;\n    githubBranch?: string;\n    repositoryRoot?: string;\n    verbose?: boolean;\n  } = {};\n\n  for (let i = 0; i < args.length; i++) {\n    if (args[i] === '--source' && i + 1 < args.length) {\n      options.sourceDir = args[i + 1];\n      i++;\n    } else if (args[i] === '--output' && i + 1 < args.length) {\n      options.outputDir = args[i + 1];\n      i++;\n    } else if (args[i] === '--github-url' && i + 1 < args.length) {\n      options.githubUrl = args[i + 1];\n      i++;\n    } else if (args[i] === '--github-branch' && i + 1 < args.length) {\n      options.githubBranch = args[i + 1];\n      i++;\n    } else if (args[i] === '--repository-root' && i + 1 < args.length) {\n      options.repositoryRoot = args[i + 1];\n      i++;\n    } else if (args[i] === '--verbose' || args[i] === '-v') {\n      options.verbose = true;\n    }\n  }\n\n  const generator = new MarkdownDocsGenerator(options);\n  generator.generate().catch(error => {\n    console.error('‚ùå Error generating documentation:', error);\n    process.exit(1);\n  });\n}\n"],"names":[],"mappings":"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"}