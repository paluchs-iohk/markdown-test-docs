# Example workflow for using the Markdown Test Documentation Generator
# Copy this file to your repository's .github/workflows/ directory and customize as needed

name: Generate Test Documentation

on:
  push:
    branches: [ main, develop ]
    paths:
      - "src/**/*.test.js"
      - "src/**/*.test.ts"
      - "test/**/*.test.js"
      - "test/**/*.test.ts"
      - "__tests__/**/*.js"
      - "__tests__/**/*.ts"
  workflow_dispatch:

jobs:
  generate-docs:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # Option 1: Use the action directly (recommended)
      - name: Generate Test Documentation with GitHub Links
        uses: username/tsdoc-test-docs@main  # Replace with actual repository
        with:
          source: "./src"                    # Directory containing test files
          output: "./docs/tests"             # Output directory for documentation
          github-url: ${{ github.server_url }}/${{ github.repository }}
          github-branch: ${{ github.ref_name }}
          repository-root: "./"

      # Option 2: Use CLI directly (alternative approach)
      # - name: Generate Test Documentation with CLI
      #   run: |
      #     npx markdown-test-docs-generator \
      #       --source ./src \
      #       --output ./docs/tests \
      #       --github-url ${{ github.server_url }}/${{ github.repository }} \
      #       --github-branch ${{ github.ref_name }} \
      #       --repository-root ./

      # Commit the generated documentation back to the repository
      - name: Commit Documentation
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add ./docs/tests
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update test documentation [skip ci]"
            git push
          fi

  # Optional: Deploy to GitHub Pages
  deploy-pages:
    runs-on: ubuntu-latest
    needs: generate-docs
    if: github.ref == 'refs/heads/main'
    
    # Sets permissions for GitHub Pages deployment
    permissions:
      contents: read
      pages: write
      id-token: write
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: main  # Ensure we get the updated documentation
      
      - name: Setup Pages
        uses: actions/configure-pages@v4
      
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './docs/tests'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
